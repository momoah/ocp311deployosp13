---
heat_template_version: queens
description: OpenShift Network and Bastion Host

parameters:
  use_fqdn: { type: boolean }
  domain: { type: string }
  public_network: { type: string }

  router_name: { type: string }
  subnet_name: { type: string }
  subnet_cidr: { type: string }
  subnet_start: { type: string }
  subnet_end: { type: string }

  secgrp_rules: { type: json }
  server_name: { type: string }
  flavor: { type: string }
  image: { type: string }
  keypair: { type: string }

conditions:
  use_fqdn: { get_param: use_fqdn }

resources:
  net:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: openshift-ansible-cluster_id-net
          params:
            cluster_id: { get_param: domain }

  subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { get_param: subnet_name }
      network: { get_resource: net }
      cidr: { get_param: subnet_cidr }
      allocation_pools:
        - start: { get_param: subnet_start }
          end: { get_param: subnet_end }

  router:
    type: OS::Neutron::Router
    properties:
      name: { get_param: router_name }
      external_gateway_info:
        network: { get_param: public_network }

  iface:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: router }
      subnet: { get_resource: subnet }

  secgrp:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template: openshift-ansible-cluster_id-bastion-secgrp
          params:
            cluster_id: { get_param: domain }
      description:
        str_replace:
          template: Security group for cluster_id OpenShift cluster bastion
          params:
            cluster_id: { get_param: domain }
      rules: { get_param: secgrp_rules }

  port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: net }
      fixed_ips:
        - subnet_id: { get_resource: subnet }
      security_groups:
        - { get_resource: secgrp }

  fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_resource: port }

  server:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: HostnameSeparatorDomain
          params:
            Hostname: { get_param: server_name }
            Separator: { if: [use_fqdn, ".", ""]}
            Domain: { if: [use_fqdn, { get_param: domain }, ""]}
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: keypair }
      networks:
        - port: { get_resource: port }
      metadata:
        clusterid: { get_param: domain }
        host-type: bastion
